{"version":3,"file":"index.js","sources":["../src/api-targets.ts","../src/index.ts","../src/mbed-targets.ts","../src/cmsis-packs.ts"],"sourcesContent":["/*\n * Copyright (c) Arm Ltd\n */\n\nconst TARGET_URL = 'https:///os.mbed.com/api/v4/targets';\n\ninterface ApiTargetRaw {\n    data: [{\n        id: string;\n        type: 'target';\n        attributes: ApiTarget;\n    }];\n}\n\nexport interface ApiTarget {\n    product_code: string;\n    target_type: 'platform' | 'module';\n    board_type: string;\n    name: string;\n    device_name?: string;\n    flash_size?: number;\n    ram_size?: number;\n    private?: boolean;\n    hidden?: boolean;\n    features: { [key: string]: string[] }\n}\n\nexport const getApiTargets = async (): Promise<ApiTarget[]> => {\n    const response = await fetch(TARGET_URL);\n    const json: ApiTargetRaw = await response.json();\n    return json.data.map(tareget => tareget.attributes);\n};\n","/*\n * Copyright (c) Arm Ltd\n */\n\nimport { getApiTargets, ApiTarget } from './api-targets';\nimport { getMbedTargets, TargetsJson, BRANCH } from './mbed-targets';\nimport { getCmsisPacks, CmsisPacks } from './cmsis-packs';\n\ninterface result {\n    heading: string;\n    data: string[];\n}\n\nconst stats = (apiTargets: ApiTarget[], mbedTargets: TargetsJson, packs: CmsisPacks): result[] => {\n\n    let apiPacks = 0;\n    let deviceNames = 0;\n\n    apiTargets.forEach(apiTarget => {\n        if (apiTarget.device_name && packs.devices[apiTarget.device_name]) {\n            apiPacks ++;\n        }\n\n        const key = apiTarget.board_type.toUpperCase();\n        const mbedTarget = mbedTargets[key];\n\n        if (mbedTarget) {\n            if (!!mbedTarget.device_name && !!apiTarget.device_name && mbedTarget.device_name === apiTarget.device_name) {\n                deviceNames ++;\n            }\n        }\n    });\n\n    const detectKeys = Object.keys(mbedTargets).filter(key => {\n        const code = mbedTargets[key].detect_code;\n        return (code && code.length);\n    });\n\n    return [{\n        heading: 'Statistics',\n        data: [\n            `Devices in the API: ${apiTargets.length}`,\n            `Devices in Mbed OS ${BRANCH}: ${Object.keys(mbedTargets).length}`,\n            `CMSIS Packs in Mbed Studio: ${Object.keys(packs.packs).length}`,\n            `Debug targets in Mbed Studio: ${Object.keys(packs.devices).length}`,\n            `API devices with matching debug target in Mbed Studio: ${apiPacks}`,\n            `API devices with matching device_name in Mbed OS ${BRANCH}: ${deviceNames}`,\n            `Mbed OS ${BRANCH} devices with a detect key: ${detectKeys.length}`\n        ]\n    }];\n};\n\nconst deviceNames = (apiTargets: ApiTarget[], mbedTargets: TargetsJson): result[] => {\n\n    let missingApi: string[] = [];\n    let missingMbed: string[] = [];\n    let misMatch: string[] = [];\n\n    apiTargets.forEach(apiTarget => {\n        const key = apiTarget.board_type.toUpperCase();\n        const mbedTarget = mbedTargets[key];\n\n        if (mbedTarget) {\n            if (mbedTarget.device_name && !apiTarget.device_name) {\n                missingApi.push(`${key} - ${mbedTarget.device_name}`);\n            }\n\n            if (!mbedTarget.device_name && apiTarget.device_name) {\n                missingMbed.push(`${key} - ${apiTarget.device_name}`);\n            }\n\n            if (!!mbedTarget.device_name && !!apiTarget.device_name && mbedTarget.device_name !== apiTarget.device_name) {\n                misMatch.push(`${key} - API: ${apiTarget.device_name}, Mbed: ${mbedTarget.device_name}`);\n            }\n        }\n    });\n\n    return [\n        {\n            heading: `API devices missing device name, but found in Mbed OS ${BRANCH}`,\n            data: missingApi\n        },\n        {\n            heading: `Mbed OS ${BRANCH} devices missing device name, but found in API`,\n            data: missingMbed\n        },\n        {\n            heading: `Device names mis-matching between Mbed OS ${BRANCH} and API`,\n            data: misMatch\n        }\n    ];\n};\n\nconst detectCodes = (apiTargets: ApiTarget[], mbedTargets: TargetsJson): result[] => {\n\n    const multipleDetect: string[] = [];\n    Object.keys(mbedTargets).forEach(key => {\n        const code = mbedTargets[key].detect_code;\n        if (code && code.length > 1) {\n            multipleDetect.push(key);\n        }\n    });\n\n    const missingDetect: string[] = [];\n    apiTargets.forEach(apiTarget => {\n        const key = apiTarget.board_type.toUpperCase();\n        const mbedTarget = mbedTargets[key];\n\n        if (mbedTarget && (!mbedTarget.detect_code || mbedTarget.detect_code.length === 0)) {\n            missingDetect.push(`${key} - ${apiTarget.product_code}`);\n        }\n    });\n\n    return [\n        {\n            heading: `Mbed OS ${BRANCH} devices with multiple detect codes`,\n            data: multipleDetect\n        },\n        {\n            heading: `Mbed OS ${BRANCH} devices missing detect code, but found in API`,\n            data: missingDetect\n        }\n    ];\n};\n\nconst packDevices = (apiTargets: ApiTarget[], packs: CmsisPacks): result[] => {\n    const missing: string[] = [];\n    const disabled: string[] = [];\n\n    apiTargets.forEach(apiTarget => {\n        if (apiTarget.device_name) {\n            const deviceName = apiTarget.device_name;\n            const entry = packs.devices[deviceName];\n\n            if (!entry) {\n                missing.push(`${apiTarget.name} - ${deviceName}`);\n                return;\n            }\n\n            if (!entry.enabled) {\n                disabled.push(`${apiTarget.name} - ${deviceName}`);\n            }\n        }\n    });\n\n    return [\n        {\n            heading: 'API devices without debug target not found in Mbed Studio',\n            data: missing\n        },\n        {\n            heading: 'API devices with disabled debug target in Mbed Studio',\n            data: disabled\n        }\n    ];\n};\n\nexport const runReport = async (): Promise<result[]> => {\n    const apiTargets = await getApiTargets();\n    const mbedTargets = await getMbedTargets();\n    const cmsisPacks = await getCmsisPacks();\n\n    const statResults = stats(apiTargets, mbedTargets, cmsisPacks);\n    const deviceNameResults = deviceNames(apiTargets, mbedTargets);\n    const detectCodeResults = detectCodes(apiTargets, mbedTargets);\n    const packDeviceResults = packDevices(apiTargets, cmsisPacks);\n\n    return [\n        ...statResults,\n        ...deviceNameResults,\n        ...detectCodeResults,\n        ...packDeviceResults\n    ];\n};\n","/*\n * Copyright (c) Arm Ltd\n */\n\nexport const BRANCH = 'master';\nconst TARGET_URL = `https://raw.githubusercontent.com/ARMmbed/mbed-os/${BRANCH}/targets/targets.json`;\n\n/**\n * Representation of the JSON in mbed-os/targets/targets.json.\n */\nexport interface TargetsJson {\n    [key: string]: TargetData;\n}\n\nexport interface TargetData {\n    key: string;\n    core?: string | null;\n    default_toolchain?: string;\n    supported_toolchains?: string[] | null;\n    extra_labels?: string[];\n    is_disk_virtual?: boolean;\n    macros?: string[];\n    device_has?: string[];\n    features?: string[];\n    detect_code?: string[];\n    public?: boolean;\n    default_lib?: string;\n    bootloader_supported?: boolean;\n    config?: TargetConfig;\n    device_name?: string;\n    offset?: TargetOffsetObject[];\n\n    [key: string]: string | string[] | number | boolean | TargetConfig | TargetValueObject | TargetOffsetObject[] |\n        null | undefined;\n}\n\nexport interface TargetConfig {\n    [key: string]: ConfigPair;\n}\n\nexport interface TargetValueObject {\n    [key: string]: string | string[] | number | null;\n}\n\nexport interface TargetOffsetObject {\n    boot: string;\n    name: string;\n    offset: number;\n}\n\nexport interface ConfigPair {\n    help?: string;\n    macro_name?: string;\n    value?: string | number | null;\n}\n\nexport const getMbedTargets = async (): Promise<TargetsJson> => {\n    const response = await fetch(TARGET_URL);\n    const json: TargetsJson = await response.json();\n    return json;\n};\n","/*\n * Copyright (c) Arm Ltd\n */\n\nconst PACKS_URL = 'https://s3-us-west-2.amazonaws.com/mbed-studio-private/tools/linux/cmsis-packs/cmsis-packs.json';\n\nexport interface CmsisPacks {\n    devices: {\n        [key: string]: {\n            packId: string;\n            enabled: boolean;\n        }\n    };\n    boards: {\n        [key: string]: {\n            deviceNames: string[];\n            packId: string;\n        }\n    },\n    packs: {\n        [key: string]: {\n            version: string;\n            family: string;\n            vendor: string;\n            packName: string;\n            bundledPackName: string;\n        }\n    },\n    vendors: {\n        [key: string]: string[];\n    }\n}\n\nexport const getCmsisPacks = async (): Promise<CmsisPacks> => {\n    const response = await fetch(PACKS_URL);\n    const json = await response.json();\n    return json;\n};\n"],"names":["runReport","fetch","_a","json","data","map","tareget","attributes","apiTargets","mbedTargets","cmsisPacks","statResults","packs","apiPacks","deviceNames","forEach","apiTarget","device_name","devices","key","board_type","toUpperCase","mbedTarget","detectKeys","Object","keys","filter","code","detect_code","length","heading","stats","deviceNameResults","missingApi","missingMbed","misMatch","push","detectCodeResults","multipleDetect","missingDetect","product_code","detectCodes","packDeviceResults","missing","disabled","deviceName","entry","name","enabled","packDevices"],"mappings":"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"}
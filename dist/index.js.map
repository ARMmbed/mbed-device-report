{"version":3,"file":"index.js","sources":["../src/api-targets.ts","../src/index.ts","../src/mbed-targets.ts","../src/cmsis-packs.ts"],"sourcesContent":["/*\n * Copyright (c) Arm Ltd\n */\n\nconst TARGET_URL = 'https:///os.mbed.com/api/v4/targets';\n\ninterface ApiTargetRaw {\n    data: [{\n        id: string;\n        type: 'target';\n        attributes: ApiTarget;\n    }];\n}\n\nexport interface ApiTarget {\n    product_code: string;\n    target_type: 'platform' | 'module';\n    board_type: string;\n    name: string;\n    device_name?: string;\n    flash_size?: number;\n    ram_size?: number;\n    private?: boolean;\n    hidden?: boolean;\n    features: { [key: string]: string[] }\n}\n\nexport const getApiTargets = async (): Promise<ApiTarget[]> => {\n    const response = await fetch(TARGET_URL);\n    const json: ApiTargetRaw = await response.json();\n    return json.data.map(tareget => tareget.attributes);\n};\n","/*\n * Copyright (c) Arm Ltd\n */\n\nimport { getApiTargets, ApiTarget } from './api-targets';\nimport { getMbedTargets, TargetsJson, BRANCH } from './mbed-targets';\nimport { getCmsisPacks, CmsisPacks } from './cmsis-packs';\n\ninterface result {\n    heading: string;\n    data: string[];\n}\n\nconst stats = (apiTargets: ApiTarget[], mbedTargets: TargetsJson): result[] => {\n\n    let deviceNames = 0;\n\n    apiTargets.forEach(apiTarget => {\n        const key = apiTarget.board_type.toUpperCase();\n        const mbedTarget = mbedTargets[key];\n\n        if (mbedTarget) {\n            if (!!mbedTarget.device_name && !!apiTarget.device_name && mbedTarget.device_name === apiTarget.device_name) {\n                deviceNames ++;\n            }\n        }\n    });\n\n    const detectKeys = Object.keys(mbedTargets).filter(key => {\n        const code = mbedTargets[key].detect_code;\n        return (code && code.length);\n    });\n\n    return [{\n        heading: 'Statistics',\n        data: [\n            `Devices in the API: ${apiTargets.length}`,\n            `Devices in Mbed OS ${BRANCH}: ${Object.keys(mbedTargets).length}`,\n            `API devices with matching device_name in Mbed OS ${BRANCH}: ${deviceNames}`,\n            `Mbed OS ${BRANCH} devices with a detect key: ${detectKeys.length}`\n        ]\n    }];\n};\n\nconst debug = (apiTargets: ApiTarget[], packs: CmsisPacks | undefined): result[] => {\n\n    if (!packs) {\n        return [{\n            heading: 'Debug',\n            data: [ 'CMSIS Packs failed to load' ]\n        }];\n    }\n\n    let apiPacks = 0;\n\n    apiTargets.forEach(apiTarget => {\n        if (apiTarget.device_name && packs.devices[apiTarget.device_name]) {\n            apiPacks ++;\n        }\n    });\n\n    return [{\n        heading: 'Debug',\n        data: [\n            `CMSIS Packs in Mbed Studio: ${Object.keys(packs.packs).length}`,\n            `Debug targets in Mbed Studio: ${Object.keys(packs.devices).length}`,\n            `API devices with matching debug target in Mbed Studio: ${apiPacks}`,\n        ]\n    }];\n};\n\nconst deviceNames = (apiTargets: ApiTarget[], mbedTargets: TargetsJson): result[] => {\n\n    let missingApi: string[] = [];\n    let missingMbed: string[] = [];\n    let misMatch: string[] = [];\n\n    apiTargets.forEach(apiTarget => {\n        const key = apiTarget.board_type.toUpperCase();\n        const mbedTarget = mbedTargets[key];\n\n        if (mbedTarget) {\n            if (mbedTarget.device_name && !apiTarget.device_name) {\n                missingApi.push(`${key} - ${mbedTarget.device_name}`);\n            }\n\n            if (!mbedTarget.device_name && apiTarget.device_name) {\n                missingMbed.push(`${key} - ${apiTarget.device_name}`);\n            }\n\n            if (!!mbedTarget.device_name && !!apiTarget.device_name && mbedTarget.device_name !== apiTarget.device_name) {\n                misMatch.push(`${key} - API: ${apiTarget.device_name}, Mbed: ${mbedTarget.device_name}`);\n            }\n        }\n    });\n\n    return [\n        {\n            heading: `API devices missing device name, but found in Mbed OS ${BRANCH}`,\n            data: missingApi\n        },\n        {\n            heading: `Mbed OS ${BRANCH} devices missing device name, but found in API`,\n            data: missingMbed\n        },\n        {\n            heading: `Device names mis-matching between Mbed OS ${BRANCH} and API`,\n            data: misMatch\n        }\n    ];\n};\n\nconst detectCodes = (apiTargets: ApiTarget[], mbedTargets: TargetsJson): result[] => {\n\n    const multipleDetect: string[] = [];\n    Object.keys(mbedTargets).forEach(key => {\n        const code = mbedTargets[key].detect_code;\n        if (code && code.length > 1) {\n            multipleDetect.push(key);\n        }\n    });\n\n    const missingDetect: string[] = [];\n    apiTargets.forEach(apiTarget => {\n        const key = apiTarget.board_type.toUpperCase();\n        const mbedTarget = mbedTargets[key];\n\n        if (mbedTarget && (!mbedTarget.detect_code || mbedTarget.detect_code.length === 0)) {\n            missingDetect.push(`${key} - ${apiTarget.product_code}`);\n        }\n    });\n\n    return [\n        {\n            heading: `Mbed OS ${BRANCH} devices with multiple detect codes`,\n            data: multipleDetect\n        },\n        {\n            heading: `Mbed OS ${BRANCH} devices missing detect code, but found in API`,\n            data: missingDetect\n        }\n    ];\n};\n\nconst productCodes = (apiTargets: ApiTarget[]): result[] => {\n\n    const codes: string[] = [];\n    const dupes: string[] = [];\n\n    apiTargets.forEach(apiTarget => {\n        const productCode = apiTarget.product_code;\n\n        if (productCode && productCode !== undefined) {\n            if (codes.indexOf(productCode) > -1) {\n                dupes.push(`${productCode} - ${apiTarget.name}`);\n            } else {\n                codes.push(productCode);\n            }\n        }\n    });\n\n    return [\n        {\n            heading: `Duplicate product_codes in API`,\n            data: dupes\n        }\n    ];\n};\n\nconst packDevices = (apiTargets: ApiTarget[], packs: CmsisPacks | undefined): result[] => {\n\n    if (!packs) {\n        return [];\n    }\n\n    const missing: string[] = [];\n    const disabled: string[] = [];\n\n    apiTargets.forEach(apiTarget => {\n        if (apiTarget.device_name) {\n            const deviceName = apiTarget.device_name;\n            const entry = packs.devices[deviceName];\n\n            if (!entry) {\n                missing.push(`${apiTarget.name} - ${deviceName}`);\n                return;\n            }\n\n            if (!entry.enabled) {\n                disabled.push(`${apiTarget.name} - ${deviceName}`);\n            }\n        }\n    });\n\n    return [\n        {\n            heading: 'API devices with debug target, but not found in Mbed Studio',\n            data: missing\n        },\n        {\n            heading: 'API devices with disabled debug target in Mbed Studio',\n            data: disabled\n        }\n    ];\n};\n\nexport const runReport = async (): Promise<result[]> => {\n    const apiTargets = await getApiTargets();\n    const mbedTargets = await getMbedTargets();\n    const cmsisPacks = await getCmsisPacks();\n\n    const statResults = stats(apiTargets, mbedTargets);\n    const debugResults = debug(apiTargets, cmsisPacks);\n    const deviceNameResults = deviceNames(apiTargets, mbedTargets);\n    const detectCodeResults = detectCodes(apiTargets, mbedTargets);\n    const packDeviceResults = packDevices(apiTargets, cmsisPacks);\n    const productCodesResults = productCodes(apiTargets);\n\n    return [\n        ...statResults,\n        ...debugResults,\n        ...deviceNameResults,\n        ...detectCodeResults,\n        ...packDeviceResults,\n        ...productCodesResults\n    ];\n};\n","/*\n * Copyright (c) Arm Ltd\n */\n\nexport const BRANCH = 'master';\nconst TARGET_URL = `https://raw.githubusercontent.com/ARMmbed/mbed-os/${BRANCH}/targets/targets.json`;\n\n/**\n * Representation of the JSON in mbed-os/targets/targets.json.\n */\nexport interface TargetsJson {\n    [key: string]: TargetData;\n}\n\nexport interface TargetData {\n    key: string;\n    core?: string | null;\n    default_toolchain?: string;\n    supported_toolchains?: string[] | null;\n    extra_labels?: string[];\n    is_disk_virtual?: boolean;\n    macros?: string[];\n    device_has?: string[];\n    features?: string[];\n    detect_code?: string[];\n    public?: boolean;\n    default_lib?: string;\n    bootloader_supported?: boolean;\n    config?: TargetConfig;\n    device_name?: string;\n    offset?: TargetOffsetObject[];\n\n    [key: string]: string | string[] | number | boolean | TargetConfig | TargetValueObject | TargetOffsetObject[] |\n        null | undefined;\n}\n\nexport interface TargetConfig {\n    [key: string]: ConfigPair;\n}\n\nexport interface TargetValueObject {\n    [key: string]: string | string[] | number | null;\n}\n\nexport interface TargetOffsetObject {\n    boot: string;\n    name: string;\n    offset: number;\n}\n\nexport interface ConfigPair {\n    help?: string;\n    macro_name?: string;\n    value?: string | number | null;\n}\n\nexport const getMbedTargets = async (): Promise<TargetsJson> => {\n    const response = await fetch(TARGET_URL);\n    const json: TargetsJson = await response.json();\n    return json;\n};\n","/*\n * Copyright (c) Arm Ltd\n */\n\nconst PACKS_URL = 'https://s3-us-west-2.amazonaws.com/mbed-studio-private/tools/linux/cmsis-packs/cmsis-packs.json';\n\nexport interface CmsisPacks {\n    devices: {\n        [key: string]: {\n            packId: string;\n            enabled: boolean;\n        }\n    };\n    boards: {\n        [key: string]: {\n            deviceNames: string[];\n            packId: string;\n        }\n    },\n    packs: {\n        [key: string]: {\n            version: string;\n            family: string;\n            vendor: string;\n            packName: string;\n            bundledPackName: string;\n        }\n    },\n    vendors: {\n        [key: string]: string[];\n    }\n}\n\nexport const getCmsisPacks = async (): Promise<CmsisPacks | undefined> => {\n    try {\n        const response = await fetch(PACKS_URL);\n        const json = await response.json();\n        return json;\n    } catch (e) {\n        return undefined\n    }\n};\n"],"names":["runReport","fetch","_a","json","data","map","tareget","attributes","apiTargets","mbedTargets","undefined","cmsisPacks","statResults","deviceNames","forEach","apiTarget","key","board_type","toUpperCase","mbedTarget","device_name","detectKeys","Object","keys","filter","code","detect_code","length","heading","stats","debugResults","packs","apiPacks","devices","debug","deviceNameResults","missingApi","missingMbed","misMatch","push","detectCodeResults","multipleDetect","missingDetect","product_code","detectCodes","packDeviceResults","missing","disabled","deviceName","entry","name","enabled","packDevices","productCodesResults","codes","dupes","productCode","indexOf","productCodes"],"mappings":"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"}